#!/usr/bin/env python
# coding: utf-8

import os
import random
import numpy as np
import tensorflow as tf
import base64

# ƒê·∫∑t seed c·ªë ƒë·ªãnh cho Python, NumPy, v√† TensorFlow
seed_value = 20  # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi seed theo √Ω mu·ªën

os.environ['PYTHONHASHSEED'] = str(seed_value)
random.seed(seed_value)
np.random.seed(seed_value)
tf.random.set_seed(seed_value)

import warnings
warnings.filterwarnings('ignore')

import backtrader as bt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import squarify
import tensorflow as tf
import tensorflow.keras.backend as K
import streamlit as st

from tensorflow.keras.layers import LSTM, Flatten, Dense, Masking
from tensorflow.keras.models import Sequential
from scikeras.wrappers import KerasRegressor
from vnstock import *
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
import backtrader as bt
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="·ª®ng d·ª•ng LSTM cho danh m·ª•c ƒë·∫ßu t∆∞",page_icon="üìä")
custom_css = """
<style>
    html, body, [class*="css"] {
        font-size: 20px;
    }
    .stButton > button {
        font-weight: bold !important;
        font-size: 20px !important;
        color: #000000 !important;
        border: 2px solid #000000 !important;
        border-radius: 5px !important;
        transition: all 0.3s ease !important;
    }
    .stButton > button:hover {
        background-color: #000000 !important;
        color: white !important;
    }
    }
</style>
"""

# √Åp d·ª•ng CSS t√πy ch·ªânh
st.markdown(custom_css, unsafe_allow_html=True)

class Basic_MACrossStrategy(bt.Strategy):
    params = dict(ma_short_period=20, ma_long_period=50)

    def __init__(self):
        # Define the short-term (20-period) moving average
        self.ma_short = bt.indicators.MovingAverageSimple(self.data.close, period=self.p.ma_short_period, 
                                                          plotname='MA 20')

        # Define the long-term (50-period) moving average
        self.ma_long = bt.indicators.MovingAverageSimple(self.data.close, period=self.p.ma_long_period, 
                                                         plotname='MA 50')

        # Define the crossover signal (1 for upward cross, -1 for downward cross)
        self.crossover = bt.indicators.CrossOver(self.ma_short, self.ma_long)

    def next(self):
        # Buy when the short MA crosses above the long MA
        if self.crossover > 0 and not self.position:
            self.buy(size=None)
            print(f'BUY CREATE, {self.data.datetime.date(0)}, Price: {self.data.close[0]:.2f}')

        # Sell when the short MA crosses below the long MA
        elif self.crossover < 0 and self.position:
            self.sell(size=None)
            print(f'SELL CREATE, {self.data.datetime.date(0)}, Price: {self.data.close[0]:.2f}')


class MACrossStrategy(bt.Strategy):
    params = dict(ma_short_period=20, ma_long_period=50)

    def __init__(self):
        self.ma_short = bt.indicators.MovingAverageSimple(self.data.close, period=self.p.ma_short_period,
                                                                plotname='MA 20')
        self.ma_long = bt.indicators.MovingAverageSimple(self.data.close, period=self.p.ma_long_period,
                                                                plotname='MA 50')
        self.crossover = bt.indicators.CrossOver(self.ma_short, self.ma_long)
        self.last_order = None
        self.buy_price = None
        self.holding = False  # Tr·∫°ng th√°i c√≥ n·∫Øm gi·ªØ c·ªï phi·∫øu kh√¥ng
        self.current_quarter = None
        self.quarterly_returns = {}  # L∆∞u return theo t·ª´ng qu√Ω

    def next(self):
        current_month = self.data.datetime.date(0).month
        current_year = self.data.datetime.date(0).year
        # SAAIIAIAIAIAIAIIAIA ###
        current_quarter = (current_year, (current_month - 1) // 3 + 1)  # Chia th√°ng theo qu√Ω

        if current_quarter not in self.quarterly_returns:
            self.quarterly_returns[current_quarter] = 0

                # Mua c·ªï phi·∫øu khi c√≥ t√≠n hi·ªáu
        if self.crossover > 0 and not self.position:
            self.buy_price = self.data.close[0]
            self.buy(size=None)
            self.holding = True
            self.current_quarter = current_quarter
            print(f'BUY CREATE: {self.data.datetime.date(0)} - Buy price: {self.data.close[0]:.2f}')

                # B√°n c·ªï phi·∫øu khi c√≥ t√≠n hi·ªáu
        elif self.crossover < 0 and self.position:
            sell_price = self.data.close[0]
            self.sell(size=None)
            profit_pct = (sell_price - self.buy_price) / self.buy_price
            self.holding = False
            self.quarterly_returns[self.current_quarter] += profit_pct
            print(f'SELL CREATE: {self.data.datetime.date(0)} - Sell price: {self.data.close[0]:.2f}, Profit: {profit_pct:.2%}')

    def stop(self):
        if self.holding:
            sell_price = self.data.close[0]
            profit_pct = (sell_price - self.buy_price) / self.buy_price
            self.quarterly_returns[self.current_quarter] += profit_pct
            print(f'SELL ALL at the end: {self.data.datetime.date(0)} - Sell price: {self.data.close[0]:.2f}, Profit: {profit_pct:.2%}')


# T·∫£i gi√° ƒë√≥ng c·ª≠a v√† th·ª±c hi·ªán chi·∫øn thu·∫≠t Trading SMA
st.header(":blue[CH·ªåN FILE .CSV ƒê·ªÇ T·∫¢I L√äN]")
st.markdown("""
    <style>
    div.stButton > button:first-child {
        background-color: #D4F6FF;
        color: white;
    }
    div.stButton > button[kind="primary"] {
        background-color: #FBFBFB;
        color: white;
    }
    </style>
    """, unsafe_allow_html=True)

if st.button("Quay tr·ªü l·∫°i trang ch·ªß",type="primary",use_container_width=True,icon="üè†"):
    st.switch_page("main_app.py")
    
def add_bg_from_local(image_file):
    with open(image_file, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read())
    st.markdown(
    f"""
    <style>
    .stApp {{
        background-image: url(data:image/{"png"};base64,{encoded_string.decode()});
        background-size: cover;
        background-color: rgba(255, 255, 255, 0.7); /* ƒêi·ªÅu ch·ªânh ƒë·ªô m·ªù ·ªü ƒë√¢y */
        background-blend-mode: overlay;
    }}
    .custom-title {{
        color: #F05454;
    }}
    .stMarkdown, .stText {{
        color: #30475E !important;
    }}
    </style>
    """,
    unsafe_allow_html=True
    )

add_bg_from_local('background.png')

st.logo("big_logo.png",icon_image="small_logo.png")

prices = st.file_uploader(":red[        ]", type="csv")

# Ki·ªÉm tra n·∫øu file ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n
if prices is not None:
    # ƒê·ªçc file CSV b·∫±ng pandas
    prices = pd.read_csv(prices,index_col=0)

    # Hi·ªÉn th·ªã d·ªØ li·ªáu trong Streamlit
    st.write("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n!")
    st.dataframe(prices,width=1000, height=200,column_order=('ticker','time','open','high','close','volume'),hide_index=True)
    x=st.button("·∫§n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu t√≠nh to√°n")
    if x==True:
        st.success("ƒêang th·ª±c hi·ªán t√≠nh to√°n...")

        mcp=prices.ticker.unique()
        R_ma_check=[]
        ticker_ma_check=[]
        check_num_of_obs=stock_historical_data('REE','2018-01-01','2023-12-31')
        num_of_obs=check_num_of_obs.drop_duplicates(subset='time',keep='first').shape[0]
        for i in mcp:
            try:
                DT=prices[prices['ticker']==i]
                if DT.drop_duplicates(subset='time',keep='first').shape[0]!=num_of_obs:
                    continue
                DT['time'] = pd.to_datetime(DT['time'])
                DT = DT.set_index('time')
                #T·∫†O D·ªÆ LI·ªÜU
                data=bt.feeds.PandasData(dataname=DT)#DT L√Ä D·ªÆ LI√äU C·ªî PHI·∫æU ƒê√É ƒê∆Ø·ª¢C L·∫§Y ·ªû TR√äN

                #th·ª±c thi chi·∫øn thu·∫≠t
                cerebro=bt.Cerebro() #t·∫°o cerebro

                cerebro.addstrategy(Basic_MACrossStrategy) #truy·ªÅn chi·∫øn thu·∫≠t


                cerebro.adddata(data) #truy·ªÅn d·ªØ li·ªáu


                cerebro.broker.setcash(1000000000) #s·ªë ti·ªÅn ƒë·∫ßu t∆∞
                cerebro.broker.setcommission(commission=0.0015) #s·ªë ti·ªÅn hoa h·ªìng/giao d·ªãch
                cerebro.addsizer(bt.sizers.AllInSizerInt,percents = 95)#s·ªë c·ªï phi·∫øu mua m·ªói giao d·ªãch


                print(i)
                before=cerebro.broker.getvalue()
                print('S·ªë ti·ªÅn tr∆∞·ªõc khi th·ª±c hi·ªán chi·∫øn thu·∫≠t: %.2f' % before)
                cerebro.run() #th·ª±c thi chi·∫øn thu·∫≠t
                after=cerebro.broker.getvalue()
                print('S·ªë ti·ªÅn sau khi th·ª±c hi·ªán chi·∫øn thu·∫≠t: %.2f' % after)
                r=(after-before)/before
                ticker_ma_check.append(i)
                R_ma_check.append(r)
            except Exception:
                continue
        return_ma_check=pd.DataFrame({'Ticker':ticker_ma_check,'Return':R_ma_check})

        return_ma_check=return_ma_check.sort_values('Return',ascending=False).head(50)

        mcp=return_ma_check.Ticker.to_list()

        list_allo=pd.DataFrame({'Asset':mcp})

        st.title('50 c·ªï phi·∫øu cho l·ª£i nhu·∫≠n cao nh·∫•t tr√™n chi·∫øn thu·∫≠t SMA theo file d·ªØ li·ªáu')
        return_ma_check_sorted = return_ma_check.sort_values('Return', ascending=False)

        # T√πy ch·ªânh bi·ªÉu ƒë·ªì
        fig = go.Figure(data=[
            go.Bar(x=return_ma_check_sorted['Ticker'], y=return_ma_check_sorted['Return'] * 100)
        ])
        
        # T√πy ch·ªânh bi·ªÉu ƒë·ªì
        fig.update_layout(
            xaxis=dict(
                title='<b>M√£ c·ªï phi·∫øu</b>',  # In ƒë·∫≠m ti√™u ƒë·ªÅ tr·ª•c x
                tickangle=-45,  # G√≥c xoay cho nh√£n tr·ª•c x
                tickfont=dict(size=12, color='black', family='Arial', bold=True)  # In ƒë·∫≠m nh√£n tr·ª•c x
            ),
            yaxis=dict(
                title='<b>T·ª∑ su·∫•t l·ª£i nhu·∫≠n (%)</b>',  # In ƒë·∫≠m ti√™u ƒë·ªÅ tr·ª•c y
                tickformat="%.2f%%",  # ƒê·ªãnh d·∫°ng s·ªë li·ªáu
                tickfont=dict(size=12, color='black', family='Arial', bold=True)  # In ƒë·∫≠m nh√£n tr·ª•c y
            ),
            plot_bgcolor='rgba(0,0,0,0)',  # N·ªÅn bi·ªÉu ƒë·ªì trong su·ªët
            paper_bgcolor='rgba(0,0,0,0)',  # N·ªÅn to√†n b·ªô khung trong su·ªët
            height=800,
            width=1200
        )


        
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.plotly_chart(fig)

        mcp=list_allo.Asset.to_list()


        # # Khai b√°o chi·∫øn thu·∫≠t SMA

        # ### √ù t∆∞·ªüng ch√≠nh l√† chia d·ªØ li·ªáu theo t·ª´ng qu√Ω v√† ch·ªâ t√≠nh l·ª£i nhu·∫≠n trong nh·ªØng kho·∫£ng th·ªùi gian m√† c√≥ n·∫Øm gi·ªØ c·ªï phi·∫øu (t·ª©c l√† ch·ªâ khi ƒë√£ mua c·ªï phi·∫øu v√† tr∆∞·ªõc khi b√°n).
        # Khai b√°o bi·∫øn l∆∞u k·∫øt qu·∫£
        quarterly_returns_MA = {}

        for i in mcp:
            try:
                print(f"\nƒêang x·ª≠ l√Ω m√£: {i}")

                DT=prices[prices['ticker']==i]
                DT['time'] = pd.to_datetime(DT['time'])
                DT = DT.set_index('time')

                data = bt.feeds.PandasData(dataname=DT)

                cerebro = bt.Cerebro()
                cerebro.addstrategy(MACrossStrategy)
                cerebro.adddata(data, name=i)
                cerebro.broker.setcash(1000000000)
                cerebro.broker.setcommission(commission=0.0015)
                cerebro.addsizer(bt.sizers.AllInSizerInt, percents=95)

                before = cerebro.broker.getvalue()
                print(f'S·ªë ti·ªÅn ban ƒë·∫ßu: {before:.2f}')

                # Ch·∫°y chi·∫øn l∆∞·ª£c
                strategy_instances = cerebro.run()

                after = cerebro.broker.getvalue()
                print(f'S·ªë ti·ªÅn sau khi th·ª±c hi·ªán chi·∫øn l∆∞·ª£c: {after:.2f}')

                # T√≠nh t·ª∑ l·ªá l·ª£i nhu·∫≠n
                r = (after - before) / before
                print(f'L·ª£i nhu·∫≠n t·ª´ m√£ {i}: {r:.2%}')

                # L∆∞u l·ª£i nhu·∫≠n theo qu√Ω cho m√£ n√†y
                quarterly_returns_MA[i] = strategy_instances[0].quarterly_returns

            except Exception as e:
                print(f"Error processing {i}: {e}")
                continue
                
        # Chuy·ªÉn k·∫øt qu·∫£ quarterly_returns_MA th√†nh DataFrame
        quarterly_returns_df = pd.DataFrame.from_dict(quarterly_returns_MA, orient='index').T


        # T·∫°o t·ªáp train 
        train_data = quarterly_returns_df
        # Reset index ƒë·ªÉ ƒë∆∞a 'year' v√† 'quarter' v·ªÅ th√†nh c·ªôt
        train_data = train_data.reset_index()


        # X√≥a c·ªôt 'year' v√† 'quarter' sau khi reset index
        train_data = train_data.drop(columns=['level_0','level_1'])


        # L·ªõp CustomModel v·ªõi h√†m sharpe_loss
        class CustomModel:
            def __init__(self, data):
                self.data = data

            def sharpe_loss(self, _, y_pred):
                # Chia gi√° tr·ªã t·ª´ng c·ªôt cho gi√° tr·ªã ƒë·∫ßu ti√™n c·ªßa c·ªôt ƒë√≥
                data_normalized = tf.divide(self.data, self.data[0] + K.epsilon())
                # T√≠nh gi√° tr·ªã danh m·ª•c ƒë·∫ßu t∆∞ (portfolio)
                portfolio_values = tf.reduce_sum(tf.multiply(data_normalized, y_pred), axis=1)
                # Tr√°nh chia cho 0 ho·∫∑c c√°c gi√° tr·ªã b·∫•t th∆∞·ªùng
                portfolio_values = tf.where(tf.equal(portfolio_values, 0), K.epsilon(), portfolio_values)
                # T√≠nh to√°n l·ª£i nhu·∫≠n danh m·ª•c ƒë·∫ßu t∆∞
                portfolio_returns = (portfolio_values[1:] - portfolio_values[:-1]) / (portfolio_values[:-1] + K.epsilon())
                # T√≠nh Sharpe ratio
                sharpe = K.mean(portfolio_returns) / (K.std(portfolio_returns) + K.epsilon())
                return -sharpe

        X_train = train_data.values[np.newaxis, :, :]
        y_train = np.zeros((1, len(train_data.columns)))


        # Kh·ªüi t·∫°o m√¥ h√¨nh t√πy ch·ªânh
        data_tensor = tf.cast(tf.constant(train_data), float)
        custom_model = CustomModel(data_tensor)


        # T·∫°o m√¥ h√¨nh LSTM
        model = Sequential([
            LSTM(512, input_shape=train_data.shape),
            Flatten(),
            Dense(train_data.shape[1], activation='softmax')
        ])

        # Bi√™n d·ªãch m√¥ h√¨nh
        model.compile(
            optimizer= 'Adam',
            loss=custom_model.sharpe_loss
        )


        model_LSTM = model.fit(X_train, y_train, epochs=100, shuffle=False)


        optimal_weights = model.predict(X_train)
        coeff_1 = optimal_weights[0]


        results_LSTM = pd.DataFrame({'Asset':mcp,"Weight":coeff_1})


        st.title('Bi·ªÉu ƒë·ªì ph√¢n b·ªï t√†i s·∫£n c·ªßa danh m·ª•c ƒë·∫ßu t∆∞')

        square_plot_test = pd.DataFrame({
            'C·ªï phi·∫øu': results_LSTM.sort_values('Weight', ascending=False).Asset,
            'T·ª∑ tr·ªçng': results_LSTM.sort_values('Weight', ascending=False).Weight
        })

        # S·∫Øp x·∫øp DataFrame theo t·ª∑ tr·ªçng
        square_plot_test = square_plot_test.sort_values('T·ª∑ tr·ªçng', ascending=True)

        # T·∫°o nh√£n m·ªõi bao g·ªìm c·∫£ t√™n c·ªï phi·∫øu v√† t·ª∑ tr·ªçng
        square_plot_test['Nh√£n'] = square_plot_test['C·ªï phi·∫øu'] + '<br>' + square_plot_test['T·ª∑ tr·ªçng'].apply(lambda x: f"{x*100:.2f}").astype(str) + '%'

        # ƒê·ªãnh nghƒ©a m√†u s·∫Øc cho c√°c kh·ªëi
        colors = [
            '#AB63FA',  # T√≠m nh·∫°t
            '#636EFA',  # Xanh d∆∞∆°ng nh·∫°t
            '#A1CAF1',  # Xanh nh·∫°t
            '#19D3F3',  # Xanh cyan
            '#00CC96',  # Xanh l√° c√¢y
            '#B6E880',  # Xanh l√° c√¢y nh·∫°t
            '#FECB52',  # V√†ng
            '#FFA15A',  # Cam s√°ng
            '#EF553B',  # ƒê·ªè cam
            '#D62728'   # ƒê·ªè ƒë·∫≠m (n√≥ng nh·∫•t)
        ]


        # T·∫°o bi·ªÉu ƒë·ªì treemap
        fig = px.treemap(
            square_plot_test,
            path=['C·ªï phi·∫øu'],
            values='T·ª∑ tr·ªçng',
            color='T·ª∑ tr·ªçng',
            color_continuous_scale=colors,
            custom_data=['Nh√£n'],
            hover_data=['T·ª∑ tr·ªçng']
        )

        # T√πy ch·ªânh hi·ªÉn th·ªã
        fig.update_traces(
            hovertemplate='<b>%{customdata[0]}</b><br>T·ª∑ tr·ªçng: %{value:.2%}<extra></extra>',
            texttemplate='<b>%{label}<br>%{value:.2%}</b>',  # Th√™m th·∫ª <b> ƒë·ªÉ in ƒë·∫≠m
            textposition="middle center",  # ƒê·∫∑t v·ªã tr√≠ text ·ªü gi·ªØa
            textfont=dict(size=10, family="Arial Black")  # TƒÉng ƒë·ªô ƒë·∫≠m c·ªßa font
        )
                # T√πy ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
        fig.update_layout(
            width=1000,  # TƒÉng chi·ªÅu r·ªông
            height=800,  # TƒÉng chi·ªÅu cao
        )
        # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
        st.plotly_chart(fig)


